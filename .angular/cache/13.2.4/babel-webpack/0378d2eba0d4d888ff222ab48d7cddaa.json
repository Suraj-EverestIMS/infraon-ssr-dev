{"ast":null,"code":"import { Injectable, ɵɵdefineInjectable, EventEmitter, Component, forwardRef, Input, Output, ViewChild, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS, FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { PhoneNumberUtil, PhoneNumberFormat } from 'google-libphonenumber';\nimport { CommonModule } from '@angular/common';\nimport { BsDropdownModule } from 'ngx-bootstrap/dropdown';\nimport { TooltipModule } from 'ngx-bootstrap/tooltip';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\nimport * as ɵngcc2 from 'ngx-bootstrap/dropdown';\nimport * as ɵngcc3 from 'ngx-bootstrap/tooltip';\nimport * as ɵngcc4 from '@angular/forms';\nconst _c0 = [\"countryList\"];\n\nfunction NgxIntlTelInputComponent_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 9);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate1(\"+\", ctx_r0.selectedCountry.dialCode, \"\");\n  }\n}\n\nfunction NgxIntlTelInputComponent_div_6_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r9 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"div\", 16)(1, \"input\", 17);\n    ɵngcc0.ɵɵlistener(\"ngModelChange\", function NgxIntlTelInputComponent_div_6_div_1_Template_input_ngModelChange_1_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r9);\n      const ctx_r8 = ɵngcc0.ɵɵnextContext(2);\n      return ctx_r8.countrySearchText = $event;\n    })(\"keyup\", function NgxIntlTelInputComponent_div_6_div_1_Template_input_keyup_1_listener() {\n      ɵngcc0.ɵɵrestoreView(_r9);\n      const ctx_r10 = ɵngcc0.ɵɵnextContext(2);\n      return ctx_r10.searchCountry();\n    })(\"click\", function NgxIntlTelInputComponent_div_6_div_1_Template_input_click_1_listener($event) {\n      return $event.stopPropagation();\n    });\n    ɵngcc0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngModel\", ctx_r3.countrySearchText)(\"placeholder\", ctx_r3.searchCountryPlaceholder);\n  }\n}\n\nfunction NgxIntlTelInputComponent_div_6_li_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r14 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"li\", 18);\n    ɵngcc0.ɵɵlistener(\"click\", function NgxIntlTelInputComponent_div_6_li_4_Template_li_click_0_listener() {\n      const restoredCtx = ɵngcc0.ɵɵrestoreView(_r14);\n      const country_r12 = restoredCtx.$implicit;\n      const ctx_r13 = ɵngcc0.ɵɵnextContext(2);\n\n      const _r2 = ɵngcc0.ɵɵreference(8);\n\n      return ctx_r13.onCountrySelect(country_r12, _r2);\n    });\n    ɵngcc0.ɵɵelementStart(1, \"div\", 19);\n    ɵngcc0.ɵɵelement(2, \"div\", 20);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementStart(3, \"span\", 21);\n    ɵngcc0.ɵɵtext(4);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementStart(5, \"span\", 22);\n    ɵngcc0.ɵɵtext(6);\n    ɵngcc0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const country_r12 = ctx.$implicit;\n    ɵngcc0.ɵɵproperty(\"id\", country_r12.iso2);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"ngClass\", country_r12.flagClass);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵtextInterpolate(country_r12.name);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵtextInterpolate1(\"+\", country_r12.dialCode, \"\");\n  }\n}\n\nfunction NgxIntlTelInputComponent_div_6_li_5_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"li\", 23);\n  }\n}\n\nfunction NgxIntlTelInputComponent_div_6_li_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r17 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"li\", 18);\n    ɵngcc0.ɵɵlistener(\"click\", function NgxIntlTelInputComponent_div_6_li_6_Template_li_click_0_listener() {\n      const restoredCtx = ɵngcc0.ɵɵrestoreView(_r17);\n      const country_r15 = restoredCtx.$implicit;\n      const ctx_r16 = ɵngcc0.ɵɵnextContext(2);\n\n      const _r2 = ɵngcc0.ɵɵreference(8);\n\n      return ctx_r16.onCountrySelect(country_r15, _r2);\n    });\n    ɵngcc0.ɵɵelementStart(1, \"div\", 19);\n    ɵngcc0.ɵɵelement(2, \"div\", 20);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementStart(3, \"span\", 21);\n    ɵngcc0.ɵɵtext(4);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementStart(5, \"span\", 22);\n    ɵngcc0.ɵɵtext(6);\n    ɵngcc0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const country_r15 = ctx.$implicit;\n    ɵngcc0.ɵɵproperty(\"id\", country_r15.iso2);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"ngClass\", country_r15.flagClass);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵtextInterpolate(country_r15.name);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵtextInterpolate1(\"+\", country_r15.dialCode, \"\");\n  }\n}\n\nfunction NgxIntlTelInputComponent_div_6_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 10);\n    ɵngcc0.ɵɵtemplate(1, NgxIntlTelInputComponent_div_6_div_1_Template, 2, 2, \"div\", 11);\n    ɵngcc0.ɵɵelementStart(2, \"ul\", 12, 13);\n    ɵngcc0.ɵɵtemplate(4, NgxIntlTelInputComponent_div_6_li_4_Template, 7, 4, \"li\", 14);\n    ɵngcc0.ɵɵtemplate(5, NgxIntlTelInputComponent_div_6_li_5_Template, 1, 0, \"li\", 15);\n    ɵngcc0.ɵɵtemplate(6, NgxIntlTelInputComponent_div_6_li_6_Template, 7, 4, \"li\", 14);\n    ɵngcc0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r1.searchCountryFlag && ctx_r1.searchCountryField);\n    ɵngcc0.ɵɵadvance(3);\n    ɵngcc0.ɵɵproperty(\"ngForOf\", ctx_r1.preferredCountriesInDropDown);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r1.preferredCountriesInDropDown == null ? null : ctx_r1.preferredCountriesInDropDown.length);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngForOf\", ctx_r1.allCountries);\n  }\n}\n\nconst _c1 = function (a0) {\n  return {\n    \"disabled\": a0\n  };\n};\n\nclass NgxIntlTelInputService {\n  constructor() {}\n\n}\n\nNgxIntlTelInputService.ɵfac = function NgxIntlTelInputService_Factory(t) {\n  return new (t || NgxIntlTelInputService)();\n};\n\nNgxIntlTelInputService.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: NgxIntlTelInputService,\n  factory: NgxIntlTelInputService.ɵfac,\n  providedIn: 'root'\n});\n/** @nocollapse */\n\n/** @nocollapse */\nNgxIntlTelInputService.ngInjectableDef = ɵɵdefineInjectable({\n  factory: function NgxIntlTelInputService_Factory() {\n    return new NgxIntlTelInputService();\n  },\n  token: NgxIntlTelInputService,\n  providedIn: \"root\"\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/** @enum {string} */\n\n\nconst CountryISO = {\n  Afghanistan: 'af',\n  Albania: 'al',\n  Algeria: 'dz',\n  AmericanSamoa: 'as',\n  Andorra: 'ad',\n  Angola: 'ao',\n  Anguilla: 'ai',\n  AntiguaAndBarbuda: 'ag',\n  Argentina: 'ar',\n  Armenia: 'am',\n  Aruba: 'aw',\n  Australia: 'au',\n  Austria: 'at',\n  Azerbaijan: 'az',\n  Bahamas: 'bs',\n  Bahrain: 'bh',\n  Bangladesh: 'bd',\n  Barbados: 'bb',\n  Belarus: 'by',\n  Belgium: 'be',\n  Belize: 'bz',\n  Benin: 'bj',\n  Bermuda: 'bm',\n  Bhutan: 'bt',\n  Bolivia: 'bo',\n  BosniaAndHerzegovina: 'ba',\n  Botswana: 'bw',\n  Brazil: 'br',\n  BritishIndianOceanTerritory: 'io',\n  BritishVirginIslands: 'vg',\n  Brunei: 'bn',\n  Bulgaria: 'bg',\n  BurkinaFaso: 'bf',\n  Burundi: 'bi',\n  Cambodia: 'kh',\n  Cameroon: 'cm',\n  Canada: 'ca',\n  CapeVerde: 'cv',\n  CaribbeanNetherlands: 'bq',\n  CaymanIslands: 'ky',\n  CentralAfricanRepublic: 'cf',\n  Chad: 'td',\n  Chile: 'cl',\n  China: 'cn',\n  ChristmasIsland: 'cx',\n  Cocos: 'cc',\n  Colombia: 'co',\n  Comoros: 'km',\n  CongoDRCJamhuriYaKidemokrasiaYaKongo: 'cd',\n  CongoRepublicCongoBrazzaville: 'cg',\n  CookIslands: 'ck',\n  CostaRica: 'cr',\n  CôteDIvoire: 'ci',\n  Croatia: 'hr',\n  Cuba: 'cu',\n  Curaçao: 'cw',\n  Cyprus: 'cy',\n  CzechRepublic: 'cz',\n  Denmark: 'dk',\n  Djibouti: 'dj',\n  Dominica: 'dm',\n  DominicanRepublic: 'do',\n  Ecuador: 'ec',\n  Egypt: 'eg',\n  ElSalvador: 'sv',\n  EquatorialGuinea: 'gq',\n  Eritrea: 'er',\n  Estonia: 'ee',\n  Ethiopia: 'et',\n  FalklandIslands: 'fk',\n  FaroeIslands: 'fo',\n  Fiji: 'fj',\n  Finland: 'fi',\n  France: 'fr',\n  FrenchGuiana: 'gf',\n  FrenchPolynesia: 'pf',\n  Gabon: 'ga',\n  Gambia: 'gm',\n  Georgia: 'ge',\n  Germany: 'de',\n  Ghana: 'gh',\n  Gibraltar: 'gi',\n  Greece: 'gr',\n  Greenland: 'gl',\n  Grenada: 'gd',\n  Guadeloupe: 'gp',\n  Guam: 'gu',\n  Guatemala: 'gt',\n  Guernsey: 'gg',\n  Guinea: 'gn',\n  GuineaBissau: 'gw',\n  Guyana: 'gy',\n  Haiti: 'ht',\n  Honduras: 'hn',\n  HongKong: 'hk',\n  Hungary: 'hu',\n  Iceland: 'is',\n  India: 'in',\n  Indonesia: 'id',\n  Iran: 'ir',\n  Iraq: 'iq',\n  Ireland: 'ie',\n  IsleOfMan: 'im',\n  Israel: 'il',\n  Italy: 'it',\n  Jamaica: 'jm',\n  Japan: 'jp',\n  Jersey: 'je',\n  Jordan: 'jo',\n  Kazakhstan: 'kz',\n  Kenya: 'ke',\n  Kiribati: 'ki',\n  Kosovo: 'xk',\n  Kuwait: 'kw',\n  Kyrgyzstan: 'kg',\n  Laos: 'la',\n  Latvia: 'lv',\n  Lebanon: 'lb',\n  Lesotho: 'ls',\n  Liberia: 'lr',\n  Libya: 'ly',\n  Liechtenstein: 'li',\n  Lithuania: 'lt',\n  Luxembourg: 'lu',\n  Macau: 'mo',\n  Macedonia: 'mk',\n  Madagascar: 'mg',\n  Malawi: 'mw',\n  Malaysia: 'my',\n  Maldives: 'mv',\n  Mali: 'ml',\n  Malta: 'mt',\n  MarshallIslands: 'mh',\n  Martinique: 'mq',\n  Mauritania: 'mr',\n  Mauritius: 'mu',\n  Mayotte: 'yt',\n  Mexico: 'mx',\n  Micronesia: 'fm',\n  Moldova: 'md',\n  Monaco: 'mc',\n  Mongolia: 'mn',\n  Montenegro: 'me',\n  Montserrat: 'ms',\n  Morocco: 'ma',\n  Mozambique: 'mz',\n  Myanmar: 'mm',\n  Namibia: 'na',\n  Nauru: 'nr',\n  Nepal: 'np',\n  Netherlands: 'nl',\n  NewCaledonia: 'nc',\n  NewZealand: 'nz',\n  Nicaragua: 'ni',\n  Niger: 'ne',\n  Nigeria: 'ng',\n  Niue: 'nu',\n  NorfolkIsland: 'nf',\n  NorthKorea: 'kp',\n  NorthernMarianaIslands: 'mp',\n  Norway: 'no',\n  Oman: 'om',\n  Pakistan: 'pk',\n  Palau: 'pw',\n  Palestine: 'ps',\n  Panama: 'pa',\n  PapuaNewGuinea: 'pg',\n  Paraguay: 'py',\n  Peru: 'pe',\n  Philippines: 'ph',\n  Poland: 'pl',\n  Portugal: 'pt',\n  PuertoRico: 'pr',\n  Qatar: 'qa',\n  Réunion: 're',\n  Romania: 'ro',\n  Russia: 'ru',\n  Rwanda: 'rw',\n  SaintBarthélemy: 'bl',\n  SaintHelena: 'sh',\n  SaintKittsAndNevis: 'kn',\n  SaintLucia: 'lc',\n  SaintMartin: 'mf',\n  SaintPierreAndMiquelon: 'pm',\n  SaintVincentAndTheGrenadines: 'vc',\n  Samoa: 'ws',\n  SanMarino: 'sm',\n  SãoToméAndPríncipe: 'st',\n  SaudiArabia: 'sa',\n  Senegal: 'sn',\n  Serbia: 'rs',\n  Seychelles: 'sc',\n  SierraLeone: 'sl',\n  Singapore: 'sg',\n  SintMaarten: 'sx',\n  Slovakia: 'sk',\n  Slovenia: 'si',\n  SolomonIslands: 'sb',\n  Somalia: 'so',\n  SouthAfrica: 'za',\n  SouthKorea: 'kr',\n  SouthSudan: 'ss',\n  Spain: 'es',\n  SriLanka: 'lk',\n  Sudan: 'sd',\n  Suriname: 'sr',\n  SvalbardAndJanMayen: 'sj',\n  Swaziland: 'sz',\n  Sweden: 'se',\n  Switzerland: 'ch',\n  Syria: 'sy',\n  Taiwan: 'tw',\n  Tajikistan: 'tj',\n  Tanzania: 'tz',\n  Thailand: 'th',\n  TimorLeste: 'tl',\n  Togo: 'tg',\n  Tokelau: 'tk',\n  Tonga: 'to',\n  TrinidadAndTobago: 'tt',\n  Tunisia: 'tn',\n  Turkey: 'tr',\n  Turkmenistan: 'tm',\n  TurksAndCaicosIslands: 'tc',\n  Tuvalu: 'tv',\n  USVirginIslands: 'vi',\n  Uganda: 'ug',\n  Ukraine: 'ua',\n  UnitedArabEmirates: 'ae',\n  UnitedKingdom: 'gb',\n  UnitedStates: 'us',\n  Uruguay: 'uy',\n  Uzbekistan: 'uz',\n  Vanuatu: 'vu',\n  VaticanCity: 'va',\n  Venezuela: 've',\n  Vietnam: 'vn',\n  WallisAndFutuna: 'wf',\n  WesternSahara: 'eh',\n  Yemen: 'ye',\n  Zambia: 'zm',\n  Zimbabwe: 'zw',\n  ÅlandIslands: 'ax'\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nlet CountryCode = /*#__PURE__*/(() => {\n  class CountryCode {\n    constructor() {\n      this.allCountries = [['Afghanistan (‫افغانستان‬‎)', CountryISO.Afghanistan, '93'], ['Albania (Shqipëri)', CountryISO.Albania, '355'], ['Algeria (‫الجزائر‬‎)', CountryISO.Algeria, '213'], ['American Samoa', 'as', '1', 1, ['684']], ['Andorra', CountryISO.Andorra, '376'], ['Angola', CountryISO.Angola, '244'], ['Anguilla', 'ai', '1', 1, ['264']], ['Antigua and Barbuda', 'ag', '1', 1, ['268']], ['Argentina', CountryISO.Argentina, '54'], ['Armenia (Հայաստան)', CountryISO.Armenia, '374'], ['Aruba', CountryISO.Aruba, '297'], ['Australia', CountryISO.Australia, '61', 0], ['Austria (Österreich)', CountryISO.Austria, '43'], ['Azerbaijan (Azərbaycan)', CountryISO.Azerbaijan, '994'], ['Bahamas', 'bs', '1', 1, ['242']], ['Bahrain (‫البحرين‬‎)', CountryISO.Bahrain, '973'], ['Bangladesh (বাংলাদেশ)', CountryISO.Bangladesh, '880'], ['Barbados', 'bb', '1', 1, ['246']], ['Belarus (Беларусь)', CountryISO.Belarus, '375'], ['Belgium (België)', CountryISO.Belgium, '32'], ['Belize', CountryISO.Belize, '501'], ['Benin (Bénin)', CountryISO.Benin, '229'], ['Bermuda', 'bm', '1', 1, ['441']], ['Bhutan (འབྲུག)', CountryISO.Bhutan, '975'], ['Bolivia', CountryISO.Bolivia, '591'], ['Bosnia and Herzegovina (Босна и Херцеговина)', CountryISO.BosniaAndHerzegovina, '387'], ['Botswana', CountryISO.Botswana, '267'], ['Brazil (Brasil)', CountryISO.Brazil, '55'], ['British Indian Ocean Territory', CountryISO.BritishIndianOceanTerritory, '246'], ['British Virgin Islands', 'vg', '1', 1, ['284']], ['Brunei', CountryISO.Brunei, '673'], ['Bulgaria (България)', CountryISO.Bulgaria, '359'], ['Burkina Faso', CountryISO.BurkinaFaso, '226'], ['Burundi (Uburundi)', CountryISO.Burundi, '257'], ['Cambodia (កម្ពុជា)', CountryISO.Cambodia, '855'], ['Cameroon (Cameroun)', CountryISO.Cameroon, '237'], ['Canada', CountryISO.Canada, '1', 1, ['204', '226', '236', '249', '250', '289', '306', '343', '365', '387', '403', '416', '418', '431', '437', '438', '450', '506', '514', '519', '548', '579', '581', '587', '604', '613', '639', '647', '672', '705', '709', '742', '778', '780', '782', '807', '819', '825', '867', '873', '902', '905']], ['Cape Verde (Kabu Verdi)', CountryISO.CapeVerde, '238'], ['Caribbean Netherlands', CountryISO.CaribbeanNetherlands, '599', 1], ['Cayman Islands', 'ky', '1', 1, ['345']], ['Central African Republic (République centrafricaine)', CountryISO.CentralAfricanRepublic, '236'], ['Chad (Tchad)', CountryISO.Chad, '235'], ['Chile', CountryISO.Chile, '56'], ['China (中国)', CountryISO.China, '86'], ['Christmas Island', CountryISO.ChristmasIsland, '61', 2], ['Cocos (Keeling) Islands', CountryISO.Cocos, '61', 1], ['Colombia', CountryISO.Colombia, '57'], ['Comoros (‫جزر القمر‬‎)', CountryISO.Comoros, '269'], ['Congo (DRC) (Jamhuri ya Kidemokrasia ya Kongo)', CountryISO.CongoDRCJamhuriYaKidemokrasiaYaKongo, '243'], ['Congo (Republic) (Congo-Brazzaville)', CountryISO.CongoRepublicCongoBrazzaville, '242'], ['Cook Islands', CountryISO.CookIslands, '682'], ['Costa Rica', CountryISO.CostaRica, '506'], ['Côte d’Ivoire', CountryISO.CôteDIvoire, '225'], ['Croatia (Hrvatska)', CountryISO.Croatia, '385'], ['Cuba', CountryISO.Cuba, '53'], ['Curaçao', CountryISO.Curaçao, '599', 0], ['Cyprus (Κύπρος)', CountryISO.Cyprus, '357'], ['Czech Republic (Česká republika)', CountryISO.CzechRepublic, '420'], ['Denmark (Danmark)', CountryISO.Denmark, '45'], ['Djibouti', CountryISO.Djibouti, '253'], ['Dominica', CountryISO.Dominica, '1767'], ['Dominican Republic (República Dominicana)', CountryISO.DominicanRepublic, '1', 2, ['809', '829', '849']], ['Ecuador', CountryISO.Ecuador, '593'], ['Egypt (‫مصر‬‎)', CountryISO.Egypt, '20'], ['El Salvador', CountryISO.ElSalvador, '503'], ['Equatorial Guinea (Guinea Ecuatorial)', CountryISO.EquatorialGuinea, '240'], ['Eritrea', CountryISO.Eritrea, '291'], ['Estonia (Eesti)', CountryISO.Estonia, '372'], ['Ethiopia', CountryISO.Ethiopia, '251'], ['Falkland Islands (Islas Malvinas)', CountryISO.FalklandIslands, '500'], ['Faroe Islands (Føroyar)', CountryISO.FaroeIslands, '298'], ['Fiji', CountryISO.Fiji, '679'], ['Finland (Suomi)', CountryISO.Finland, '358', 0], ['France', CountryISO.France, '33'], ['French Guiana (Guyane française)', CountryISO.FrenchGuiana, '594'], ['French Polynesia (Polynésie française)', CountryISO.FrenchPolynesia, '689'], ['Gabon', CountryISO.Gabon, '241'], ['Gambia', CountryISO.Gambia, '220'], ['Georgia (საქართველო)', CountryISO.Georgia, '995'], ['Germany (Deutschland)', CountryISO.Germany, '49'], ['Ghana (Gaana)', CountryISO.Ghana, '233'], ['Gibraltar', CountryISO.Gibraltar, '350'], ['Greece (Ελλάδα)', CountryISO.Greece, '30'], ['Greenland (Kalaallit Nunaat)', CountryISO.Greenland, '299'], ['Grenada', CountryISO.Grenada, '1473'], ['Guadeloupe', CountryISO.Guadeloupe, '590', 0], ['Guam', 'gu', '1', 1, ['671']], ['Guatemala', CountryISO.Guatemala, '502'], ['Guernsey', CountryISO.Guernsey, '44', 1, [1481]], ['Guinea (Guinée)', CountryISO.Guinea, '224'], ['Guinea-Bissau (Guiné Bissau)', CountryISO.GuineaBissau, '245'], ['Guyana', CountryISO.Guyana, '592'], ['Haiti', CountryISO.Haiti, '509'], ['Honduras', CountryISO.Honduras, '504'], ['Hong Kong (香港)', CountryISO.HongKong, '852'], ['Hungary (Magyarország)', CountryISO.Hungary, '36'], ['Iceland (Ísland)', CountryISO.Iceland, '354'], ['India (भारत)', CountryISO.India, '91'], ['Indonesia', CountryISO.Indonesia, '62'], ['Iran (‫ایران‬‎)', CountryISO.Iran, '98'], ['Iraq (‫العراق‬‎)', CountryISO.Iraq, '964'], ['Ireland', CountryISO.Ireland, '353'], ['Isle of Man', CountryISO.IsleOfMan, '44', 2, [1624]], ['Israel (‫ישראל‬‎)', CountryISO.Israel, '972'], ['Italy (Italia)', CountryISO.Italy, '39', 0], ['Jamaica', 'jm', '1', 1, ['876']], ['Japan (日本)', CountryISO.Japan, '81'], ['Jersey', CountryISO.Jersey, '44', 3, [1534]], ['Jordan (‫الأردن‬‎)', CountryISO.Jordan, '962'], ['Kazakhstan (Казахстан)', CountryISO.Kazakhstan, '7', 1], ['Kenya', CountryISO.Kenya, '254'], ['Kiribati', CountryISO.Kiribati, '686'], ['Kosovo', CountryISO.Kosovo, '383'], ['Kuwait (‫الكويت‬‎)', CountryISO.Kuwait, '965'], ['Kyrgyzstan (Кыргызстан)', CountryISO.Kyrgyzstan, '996'], ['Laos (ລາວ)', CountryISO.Laos, '856'], ['Latvia (Latvija)', CountryISO.Latvia, '371'], ['Lebanon (‫لبنان‬‎)', CountryISO.Lebanon, '961'], ['Lesotho', CountryISO.Lesotho, '266'], ['Liberia', CountryISO.Liberia, '231'], ['Libya (‫ليبيا‬‎)', CountryISO.Libya, '218'], ['Liechtenstein', CountryISO.Liechtenstein, '423'], ['Lithuania (Lietuva)', CountryISO.Lithuania, '370'], ['Luxembourg', CountryISO.Luxembourg, '352'], ['Macau (澳門)', CountryISO.Macau, '853'], ['Macedonia (FYROM) (Македонија)', CountryISO.Macedonia, '389'], ['Madagascar (Madagasikara)', CountryISO.Madagascar, '261'], ['Malawi', CountryISO.Malawi, '265'], ['Malaysia', CountryISO.Malaysia, '60'], ['Maldives', CountryISO.Maldives, '960'], ['Mali', CountryISO.Mali, '223'], ['Malta', CountryISO.Malta, '356'], ['Marshall Islands', CountryISO.MarshallIslands, '692'], ['Martinique', CountryISO.Martinique, '596'], ['Mauritania (‫موريتانيا‬‎)', CountryISO.Mauritania, '222'], ['Mauritius (Moris)', CountryISO.Mauritius, '230'], ['Mayotte', CountryISO.Mayotte, '262', 1], ['Mexico (México)', CountryISO.Mexico, '52'], ['Micronesia', CountryISO.Micronesia, '691'], ['Moldova (Republica Moldova)', CountryISO.Moldova, '373'], ['Monaco', CountryISO.Monaco, '377'], ['Mongolia (Монгол)', CountryISO.Mongolia, '976'], ['Montenegro (Crna Gora)', CountryISO.Montenegro, '382'], ['Montserrat', 'ms', '1', 1, ['664']], ['Morocco (‫المغرب‬‎)', CountryISO.Morocco, '212', 0], ['Mozambique (Moçambique)', CountryISO.Mozambique, '258'], ['Myanmar (Burma) (မြန်မာ)', CountryISO.Myanmar, '95'], ['Namibia (Namibië)', CountryISO.Namibia, '264'], ['Nauru', CountryISO.Nauru, '674'], ['Nepal (नेपाल)', CountryISO.Nepal, '977'], ['Netherlands (Nederland)', CountryISO.Netherlands, '31'], ['New Caledonia (Nouvelle-Calédonie)', CountryISO.NewCaledonia, '687'], ['New Zealand', CountryISO.NewZealand, '64'], ['Nicaragua', CountryISO.Nicaragua, '505'], ['Niger (Nijar)', CountryISO.Niger, '227'], ['Nigeria', CountryISO.Nigeria, '234'], ['Niue', CountryISO.Niue, '683'], ['Norfolk Island', CountryISO.NorfolkIsland, '672'], ['North Korea (조선 민주주의 인민 공화국)', CountryISO.NorthKorea, '850'], ['Northern Mariana Islands', CountryISO.NorthernMarianaIslands, '1670'], ['Norway (Norge)', CountryISO.Norway, '47', 0], ['Oman (‫عُمان‬‎)', CountryISO.Oman, '968'], ['Pakistan (‫پاکستان‬‎)', CountryISO.Pakistan, '92'], ['Palau', CountryISO.Palau, '680'], ['Palestine (‫فلسطين‬‎)', CountryISO.Palestine, '970'], ['Panama (Panamá)', CountryISO.Panama, '507'], ['Papua New Guinea', CountryISO.PapuaNewGuinea, '675'], ['Paraguay', CountryISO.Paraguay, '595'], ['Peru (Perú)', CountryISO.Peru, '51'], ['Philippines', CountryISO.Philippines, '63'], ['Poland (Polska)', CountryISO.Poland, '48'], ['Portugal', CountryISO.Portugal, '351'], ['Puerto Rico', CountryISO.PuertoRico, '1', 3, ['787', '939']], ['Qatar (‫قطر‬‎)', CountryISO.Qatar, '974'], ['Réunion (La Réunion)', CountryISO.Réunion, '262', 0], ['Romania (România)', CountryISO.Romania, '40'], ['Russia (Россия)', CountryISO.Russia, '7', 0], ['Rwanda', CountryISO.Rwanda, '250'], ['Saint Barthélemy (Saint-Barthélemy)', CountryISO.SaintBarthélemy, '590', 1], ['Saint Helena', CountryISO.SaintHelena, '290'], ['Saint Kitts and Nevis', CountryISO.SaintKittsAndNevis, '1869'], ['Saint Lucia', 'lc', '1', 1, ['758']], ['Saint Martin (Saint-Martin (partie française))', CountryISO.SaintMartin, '590', 2], ['Saint Pierre and Miquelon (Saint-Pierre-et-Miquelon)', CountryISO.SaintPierreAndMiquelon, '508'], ['Saint Vincent and the Grenadines', 'vc', '1', 1, ['784']], ['Samoa', CountryISO.Samoa, '685'], ['San Marino', CountryISO.SanMarino, '378'], ['São Tomé and Príncipe (São Tomé e Príncipe)', CountryISO.SãoToméAndPríncipe, '239'], ['Saudi Arabia (‫المملكة العربية السعودية‬‎)', CountryISO.SaudiArabia, '966'], ['Senegal (Sénégal)', CountryISO.Senegal, '221'], ['Serbia (Србија)', CountryISO.Serbia, '381'], ['Seychelles', CountryISO.Seychelles, '248'], ['Sierra Leone', CountryISO.SierraLeone, '232'], ['Singapore', CountryISO.Singapore, '65'], ['Sint Maarten', 'sx', '1', 1, ['721']], ['Slovakia (Slovensko)', CountryISO.Slovakia, '421'], ['Slovenia (Slovenija)', CountryISO.Slovenia, '386'], ['Solomon Islands', CountryISO.SolomonIslands, '677'], ['Somalia (Soomaaliya)', CountryISO.Somalia, '252'], ['South Africa', CountryISO.SouthAfrica, '27'], ['South Korea (대한민국)', CountryISO.SouthKorea, '82'], ['South Sudan (‫جنوب السودان‬‎)', CountryISO.SouthSudan, '211'], ['Spain (España)', CountryISO.Spain, '34'], ['Sri Lanka (ශ්‍රී ලංකාව)', CountryISO.SriLanka, '94'], ['Sudan (‫السودان‬‎)', CountryISO.Sudan, '249'], ['Suriname', CountryISO.Suriname, '597'], ['Svalbard and Jan Mayen', CountryISO.SvalbardAndJanMayen, '47', 1], ['Swaziland', CountryISO.Swaziland, '268'], ['Sweden (Sverige)', CountryISO.Sweden, '46'], ['Switzerland (Schweiz)', CountryISO.Switzerland, '41'], ['Syria (‫سوريا‬‎)', CountryISO.Syria, '963'], ['Taiwan (台灣)', CountryISO.Taiwan, '886'], ['Tajikistan', CountryISO.Tajikistan, '992'], ['Tanzania', CountryISO.Tanzania, '255'], ['Thailand (ไทย)', CountryISO.Thailand, '66'], ['Timor-Leste', CountryISO.TimorLeste, '670'], ['Togo', CountryISO.Togo, '228'], ['Tokelau', CountryISO.Tokelau, '690'], ['Tonga', CountryISO.Tonga, '676'], ['Trinidad and Tobago', 'tt', '1', 1, ['868']], ['Tunisia (‫تونس‬‎)', CountryISO.Tunisia, '216'], ['Turkey (Türkiye)', CountryISO.Turkey, '90'], ['Turkmenistan', CountryISO.Turkmenistan, '993'], ['Turks and Caicos Islands', CountryISO.TurksAndCaicosIslands, '1649'], ['Tuvalu', CountryISO.Tuvalu, '688'], ['U.S. Virgin Islands', 'vi', '1', 1, ['340']], ['Uganda', CountryISO.Uganda, '256'], ['Ukraine (Україна)', CountryISO.Ukraine, '380'], ['United Arab Emirates (‫الإمارات العربية المتحدة‬‎)', CountryISO.UnitedArabEmirates, '971'], ['United Kingdom', CountryISO.UnitedKingdom, '44', 0], ['United States', CountryISO.UnitedStates, '1', 0], ['Uruguay', CountryISO.Uruguay, '598'], ['Uzbekistan (Oʻzbekiston)', CountryISO.Uzbekistan, '998'], ['Vanuatu', CountryISO.Vanuatu, '678'], ['Vatican City (Città del Vaticano)', CountryISO.VaticanCity, '39', 1], ['Venezuela', CountryISO.Venezuela, '58'], ['Vietnam (Việt Nam)', CountryISO.Vietnam, '84'], ['Wallis and Futuna', CountryISO.WallisAndFutuna, '681'], ['Western Sahara (‫الصحراء الغربية‬‎)', CountryISO.WesternSahara, '212', 1], ['Yemen (‫اليمن‬‎)', CountryISO.Yemen, '967'], ['Zambia', CountryISO.Zambia, '260'], ['Zimbabwe', CountryISO.Zimbabwe, '263'], ['Åland Islands', CountryISO.ÅlandIslands, '358', 1]];\n    }\n\n  }\n\n  CountryCode.ɵfac = function CountryCode_Factory(t) {\n    return new (t || CountryCode)();\n  };\n\n  CountryCode.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: CountryCode,\n    factory: CountryCode.ɵfac\n  });\n  /**\n   * @fileoverview added by tsickle\n   * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n   */\n\n  /** @type {?} */\n\n  return CountryCode;\n})();\n\nconst phoneNumberValidator =\n/**\n* @param {?} control\n* @return {?}\n*/\ncontrol => {\n  /** @type {?} */\n  const id = control.value && control.value.id ? control.value.id : 'phone';\n  /** @type {?} */\n\n  const el = document.getElementById(id) ? document.getElementById(id) : undefined;\n\n  if (el) {\n    /** @type {?} */\n    const isCheckValidation = el.getAttribute('validation');\n\n    if (isCheckValidation === 'true') {\n      /** @type {?} */\n      const isRequired = control.errors && control.errors.required === true;\n      /** @type {?} */\n\n      const error = {\n        validatePhoneNumber: {\n          valid: false\n        }\n      };\n      /** @type {?} */\n\n      let number;\n\n      try {\n        number = PhoneNumberUtil.getInstance().parse(control.value.number, control.value.countryCode);\n      } catch (e) {\n        if (isRequired === true) {\n          return error;\n        }\n      }\n\n      if (control.value) {\n        if (!number) {\n          return error;\n        } else {\n          if (!PhoneNumberUtil.getInstance().isValidNumberForRegion(number, control.value.countryCode)) {\n            return error;\n          }\n        }\n      }\n    } else if (isCheckValidation === 'false') {\n      control.clearValidators();\n    }\n  }\n\n  return;\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/** @enum {string} */\n\n\nconst SearchCountryField = {\n  DialCode: 'dialCode',\n  Iso2: 'iso2',\n  Name: 'name',\n  All: 'all'\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/** @enum {string} */\n\nconst TooltipLabel = {\n  Name: 'name',\n  Iso2: 'iso2'\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nconst ɵ0 = phoneNumberValidator;\nlet NgxIntlTelInputComponent = /*#__PURE__*/(() => {\n  class NgxIntlTelInputComponent {\n    /**\n     * @param {?} countryCodeData\n     */\n    constructor(countryCodeData) {\n      this.countryCodeData = countryCodeData;\n      this.value = '';\n      this.preferredCountries = [];\n      this.enablePlaceholder = true;\n      this.cssClass = 'form-control';\n      this.onlyCountries = [];\n      this.enableAutoCountrySelect = true;\n      this.searchCountryFlag = false;\n      this.searchCountryField = [SearchCountryField.All];\n      this.searchCountryPlaceholder = 'Search Country';\n      this.maxLength = '';\n      this.selectFirstCountry = true;\n      this.phoneValidation = true;\n      this.id = 'phone';\n      this.countryChange = new EventEmitter();\n      this.selectedCountry = {\n        areaCodes: undefined,\n        dialCode: '',\n        flagClass: '',\n        iso2: '',\n        name: '',\n        placeHolder: '',\n        priority: 0\n      }; // display the country dial code next to the selected flag\n\n      this.separateDialCode = false;\n      this.phoneNumber = '';\n      this.allCountries = [];\n      this.preferredCountriesInDropDown = []; // Has to be 'any' to prevent a need to install @types/google-libphonenumber by the package user...\n\n      this.phoneUtil = PhoneNumberUtil.getInstance();\n      this.disabled = false;\n      this.errors = ['Phone number is required.'];\n      this.countrySearchText = '';\n\n      this.onTouched =\n      /**\n      * @return {?}\n      */\n      () => {};\n\n      this.propagateChange =\n      /**\n      * @param {?} _\n      * @return {?}\n      */\n      _ => {};\n    }\n    /**\n     * @return {?}\n     */\n\n\n    ngOnInit() {\n      this.init();\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n\n\n    ngOnChanges(changes) {\n      if (this.allCountries && changes['selectedCountryISO'] && changes['selectedCountryISO'].currentValue !== changes['selectedCountryISO'].previousValue) {\n        this.getSelectedCountry();\n      }\n\n      if (changes.preferredCountries) {\n        this.getPreferredCountries();\n      }\n\n      this.checkSeparateDialCodeStyle();\n    }\n    /*\n            This is a wrapper method to avoid calling this.ngOnInit() in writeValue().\n            Ref: http://codelyzer.com/rules/no-life-cycle-call/\n        */\n\n    /**\n     * @return {?}\n     */\n\n\n    init() {\n      this.fetchCountryData();\n\n      if (this.preferredCountries.length) {\n        this.getPreferredCountries();\n      }\n\n      if (this.onlyCountries.length) {\n        this.allCountries = this.allCountries.filter(\n        /**\n        * @param {?} c\n        * @return {?}\n        */\n        c => this.onlyCountries.includes(c.iso2));\n      }\n\n      if (this.selectFirstCountry) {\n        if (this.preferredCountriesInDropDown.length) {\n          this.setSelectedCountry(this.preferredCountriesInDropDown[0]);\n        } else {\n          this.setSelectedCountry(this.allCountries[0]);\n        }\n      }\n\n      this.getSelectedCountry();\n      this.checkSeparateDialCodeStyle();\n    }\n    /**\n     * @return {?}\n     */\n\n\n    getPreferredCountries() {\n      if (this.preferredCountries.length) {\n        this.preferredCountriesInDropDown = [];\n        this.preferredCountries.forEach(\n        /**\n        * @param {?} iso2\n        * @return {?}\n        */\n        iso2 => {\n          /** @type {?} */\n          const preferredCountry = this.allCountries.filter(\n          /**\n          * @param {?} c\n          * @return {?}\n          */\n          c => {\n            return c.iso2 === iso2;\n          });\n          this.preferredCountriesInDropDown.push(preferredCountry[0]);\n        });\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n\n    getSelectedCountry() {\n      if (this.selectedCountryISO) {\n        this.selectedCountry = this.allCountries.find(\n        /**\n        * @param {?} c\n        * @return {?}\n        */\n        c => {\n          return c.iso2.toLowerCase() === this.selectedCountryISO.toLowerCase();\n        });\n\n        if (this.selectedCountry) {\n          if (this.phoneNumber) {\n            this.onPhoneNumberChange();\n          } else {\n            this.propagateChange(undefined);\n          }\n        }\n      }\n    }\n    /**\n     * @param {?} country\n     * @return {?}\n     */\n\n\n    setSelectedCountry(country) {\n      this.selectedCountry = country;\n      this.countryChange.emit(country);\n    }\n    /**\n     * Search country based on country name, iso2, dialCode or all of them.\n     * @return {?}\n     */\n\n\n    searchCountry() {\n      if (!this.countrySearchText) {\n        this.countryList.nativeElement.querySelector('.country-list li').scrollIntoView({\n          behavior: 'smooth',\n          block: 'nearest',\n          inline: 'nearest'\n        });\n        return;\n      }\n      /** @type {?} */\n\n\n      const countrySearchTextLower = this.countrySearchText.toLowerCase();\n      /** @type {?} */\n\n      const country = this.allCountries.filter(\n      /**\n      * @param {?} c\n      * @return {?}\n      */\n      c => {\n        if (this.searchCountryField.indexOf(SearchCountryField.All) > -1) {\n          // Search in all fields\n          if (c.iso2.toLowerCase().startsWith(countrySearchTextLower)) {\n            return c;\n          }\n\n          if (c.name.toLowerCase().startsWith(countrySearchTextLower)) {\n            return c;\n          }\n\n          if (c.dialCode.startsWith(this.countrySearchText)) {\n            return c;\n          }\n        } else {\n          // Or search by specific SearchCountryField(s)\n          if (this.searchCountryField.indexOf(SearchCountryField.Iso2) > -1) {\n            if (c.iso2.toLowerCase().startsWith(countrySearchTextLower)) {\n              return c;\n            }\n          }\n\n          if (this.searchCountryField.indexOf(SearchCountryField.Name) > -1) {\n            if (c.name.toLowerCase().startsWith(countrySearchTextLower)) {\n              return c;\n            }\n          }\n\n          if (this.searchCountryField.indexOf(SearchCountryField.DialCode) > -1) {\n            if (c.dialCode.startsWith(this.countrySearchText)) {\n              return c;\n            }\n          }\n        }\n      });\n\n      if (country.length > 0) {\n        /** @type {?} */\n        const el = this.countryList.nativeElement.querySelector('#' + country[0].iso2);\n\n        if (el) {\n          el.scrollIntoView({\n            behavior: 'smooth',\n            block: 'nearest',\n            inline: 'nearest'\n          });\n        }\n      }\n\n      this.checkSeparateDialCodeStyle();\n    }\n    /**\n     * @return {?}\n     */\n\n\n    onPhoneNumberChange() {\n      this.value = this.phoneNumber;\n      /** @type {?} */\n\n      let number;\n\n      try {\n        number = this.phoneUtil.parse(this.phoneNumber, this.selectedCountry.iso2.toUpperCase());\n      } catch (e) {}\n      /** @type {?} */\n\n\n      let countryCode = this.selectedCountry.iso2; // auto select country based on the extension (and areaCode if needed) (e.g select Canada if number starts with +1 416)\n\n      if (this.enableAutoCountrySelect) {\n        countryCode = number && number.getCountryCode() ? this.getCountryIsoCode(number.getCountryCode(), number) : this.selectedCountry.iso2;\n\n        if (countryCode && countryCode !== this.selectedCountry.iso2) {\n          /** @type {?} */\n          const newCountry = this.allCountries.find(\n          /**\n          * @param {?} c\n          * @return {?}\n          */\n          c => c.iso2 === countryCode);\n\n          if (newCountry) {\n            this.selectedCountry = newCountry;\n          }\n        }\n      }\n\n      countryCode = countryCode ? countryCode : this.selectedCountry.iso2;\n      this.checkSeparateDialCodeStyle();\n\n      if (!this.value) {\n        this.propagateChange(undefined);\n      } else {\n        /** @type {?} */\n        const intlNo = number ? this.phoneUtil.format(number, PhoneNumberFormat.INTERNATIONAL) : ''; // parse phoneNumber if separate dial code is needed\n\n        if (this.separateDialCode && intlNo) {\n          this.value = this.removeDialCode(intlNo);\n        }\n\n        this.propagateChange({\n          number: this.value,\n          internationalNumber: intlNo,\n          nationalNumber: number ? this.phoneUtil.format(number, PhoneNumberFormat.NATIONAL) : '',\n          countryCode: countryCode.toUpperCase(),\n          dialCode: '+' + this.selectedCountry.dialCode,\n          id: this.id\n        });\n      }\n    }\n    /**\n     * @param {?} country\n     * @param {?} el\n     * @return {?}\n     */\n\n\n    onCountrySelect(country, el) {\n      this.setSelectedCountry(country);\n      this.checkSeparateDialCodeStyle();\n\n      if (this.phoneNumber && this.phoneNumber.length > 0) {\n        this.value = this.phoneNumber;\n        /** @type {?} */\n\n        let number;\n\n        try {\n          number = this.phoneUtil.parse(this.phoneNumber, this.selectedCountry.iso2.toUpperCase());\n        } catch (e) {}\n        /** @type {?} */\n\n\n        const intlNo = number ? this.phoneUtil.format(number, PhoneNumberFormat.INTERNATIONAL) : ''; // parse phoneNumber if separate dial code is needed\n\n        if (this.separateDialCode && intlNo) {\n          this.value = this.removeDialCode(intlNo);\n        }\n\n        this.propagateChange({\n          number: this.value,\n          internationalNumber: intlNo,\n          nationalNumber: number ? this.phoneUtil.format(number, PhoneNumberFormat.NATIONAL) : '',\n          countryCode: this.selectedCountry.iso2.toUpperCase(),\n          dialCode: '+' + this.selectedCountry.dialCode,\n          id: this.id\n        });\n      } else {\n        this.propagateChange(undefined);\n      }\n\n      el.focus();\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n\n\n    onInputKeyPress(event) {\n      /** @type {?} */\n      const allowedChars = /[0-9\\+\\-\\ ]/;\n      /** @type {?} */\n\n      const allowedCtrlChars = /[axcv]/; // Allows copy-pasting\n\n      /** @type {?} */\n\n      const allowedOtherKeys = ['ArrowLeft', 'ArrowUp', 'ArrowRight', 'ArrowDown', 'Home', 'End', 'Insert', 'Delete', 'Backspace'];\n\n      if (!allowedChars.test(event.key) && !(event.ctrlKey && allowedCtrlChars.test(event.key)) && !allowedOtherKeys.includes(event.key)) {\n        event.preventDefault();\n      }\n    }\n    /**\n     * @protected\n     * @return {?}\n     */\n\n\n    fetchCountryData() {\n      /* Clearing the list to avoid duplicates (https://github.com/webcat12345/ngx-intl-tel-input/issues/248) */\n      this.allCountries = [];\n      this.countryCodeData.allCountries.forEach(\n      /**\n      * @param {?} c\n      * @return {?}\n      */\n      c => {\n        /** @type {?} */\n        const country = {\n          name: c[0].toString(),\n          iso2: c[1].toString(),\n          dialCode: c[2].toString(),\n          priority: +c[3] || 0,\n          areaCodes:\n          /** @type {?} */\n          c[4] || undefined,\n          flagClass: c[1].toString().toLocaleLowerCase(),\n          placeHolder: ''\n        };\n\n        if (this.enablePlaceholder) {\n          country.placeHolder = this.getPhoneNumberPlaceHolder(country.iso2.toUpperCase());\n        }\n\n        this.allCountries.push(country);\n      });\n    }\n    /**\n     * @protected\n     * @param {?} countryCode\n     * @return {?}\n     */\n\n\n    getPhoneNumberPlaceHolder(countryCode) {\n      try {\n        return this.phoneUtil.format(this.phoneUtil.getExampleNumber(countryCode), PhoneNumberFormat.INTERNATIONAL);\n      } catch (e) {\n        return e;\n      }\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n\n\n    registerOnChange(fn) {\n      this.propagateChange = fn;\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n\n\n    registerOnTouched(fn) {\n      this.onTouched = fn;\n    }\n    /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n\n\n    setDisabledState(isDisabled) {\n      this.disabled = isDisabled;\n    }\n    /**\n     * @param {?} obj\n     * @return {?}\n     */\n\n\n    writeValue(obj) {\n      if (obj === undefined) {\n        this.init();\n      }\n\n      this.phoneNumber = obj;\n      setTimeout(\n      /**\n      * @return {?}\n      */\n      () => {\n        this.onPhoneNumberChange();\n      }, 1);\n    }\n    /**\n     * @private\n     * @param {?} countryCode\n     * @param {?} number\n     * @return {?}\n     */\n\n\n    getCountryIsoCode(countryCode, number) {\n      // Will use this to match area code from the first numbers\n\n      /** @type {?} */\n      const rawNumber = number['values_']['2'].toString(); // List of all countries with countryCode (can be more than one. e.x. US, CA, DO, PR all have +1 countryCode)\n\n      /** @type {?} */\n\n      const countries = this.allCountries.filter(\n      /**\n      * @param {?} c\n      * @return {?}\n      */\n      c => c.dialCode === countryCode.toString()); // Main country is the country, which has no areaCodes specified in country-code.ts file.\n\n      /** @type {?} */\n\n      const mainCountry = countries.find(\n      /**\n      * @param {?} c\n      * @return {?}\n      */\n      c => c.areaCodes === undefined); // Secondary countries are all countries, which have areaCodes specified in country-code.ts file.\n\n      /** @type {?} */\n\n      const secondaryCountries = countries.filter(\n      /**\n      * @param {?} c\n      * @return {?}\n      */\n      c => c.areaCodes !== undefined);\n      /** @type {?} */\n\n      let matchedCountry = mainCountry ? mainCountry.iso2 : undefined;\n      /*\n          Interate over each secondary country and check if nationalNumber starts with any of areaCodes available.\n          If no matches found, fallback to the main country.\n      */\n\n      secondaryCountries.forEach(\n      /**\n      * @param {?} country\n      * @return {?}\n      */\n      country => {\n        country.areaCodes.forEach(\n        /**\n        * @param {?} areaCode\n        * @return {?}\n        */\n        areaCode => {\n          if (rawNumber.startsWith(areaCode)) {\n            matchedCountry = country.iso2;\n          }\n        });\n      });\n      return matchedCountry;\n    }\n    /**\n     * @param {?} placeholder\n     * @return {?}\n     */\n\n\n    separateDialCodePlaceHolder(placeholder) {\n      return this.removeDialCode(placeholder);\n    }\n    /**\n     * @private\n     * @param {?} phoneNumber\n     * @return {?}\n     */\n\n\n    removeDialCode(phoneNumber) {\n      if (this.separateDialCode && phoneNumber) {\n        phoneNumber = phoneNumber.substr(phoneNumber.indexOf(' ') + 1);\n      }\n\n      return phoneNumber;\n    } // adjust input alignment\n\n    /**\n     * @private\n     * @return {?}\n     */\n\n\n    checkSeparateDialCodeStyle() {\n      if (this.separateDialCode && this.selectedCountry) {\n        /** @type {?} */\n        const cntryCd = this.selectedCountry.dialCode;\n        this.separateDialCodeClass = 'separate-dial-code iti-sdc-' + (cntryCd.length + 1);\n      } else {\n        this.separateDialCodeClass = '';\n      }\n    }\n\n  }\n\n  NgxIntlTelInputComponent.ɵfac = function NgxIntlTelInputComponent_Factory(t) {\n    return new (t || NgxIntlTelInputComponent)(ɵngcc0.ɵɵdirectiveInject(CountryCode));\n  };\n\n  NgxIntlTelInputComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: NgxIntlTelInputComponent,\n    selectors: [[\"ngx-intl-tel-input\"]],\n    viewQuery: function NgxIntlTelInputComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.countryList = _t.first);\n      }\n    },\n    inputs: {\n      value: \"value\",\n      preferredCountries: \"preferredCountries\",\n      enablePlaceholder: \"enablePlaceholder\",\n      cssClass: \"cssClass\",\n      onlyCountries: \"onlyCountries\",\n      enableAutoCountrySelect: \"enableAutoCountrySelect\",\n      searchCountryFlag: \"searchCountryFlag\",\n      searchCountryField: \"searchCountryField\",\n      searchCountryPlaceholder: \"searchCountryPlaceholder\",\n      maxLength: \"maxLength\",\n      selectFirstCountry: \"selectFirstCountry\",\n      phoneValidation: \"phoneValidation\",\n      id: \"id\",\n      separateDialCode: \"separateDialCode\",\n      tooltipField: \"tooltipField\",\n      selectedCountryISO: \"selectedCountryISO\"\n    },\n    outputs: {\n      countryChange: \"countryChange\"\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([CountryCode, {\n      provide: NG_VALUE_ACCESSOR,\n      // tslint:disable-next-line:no-forward-ref\n      useExisting: forwardRef(\n      /**\n      * @return {?}\n      */\n      () => NgxIntlTelInputComponent),\n      multi: true\n    }, {\n      provide: NG_VALIDATORS,\n      useValue: ɵ0,\n      multi: true\n    }]), ɵngcc0.ɵɵNgOnChangesFeature],\n    decls: 9,\n    vars: 14,\n    consts: [[1, \"intl-tel-input\", \"allow-dropdown\", 3, \"ngClass\"], [\"dropdown\", \"\", 1, \"flag-container\", 3, \"ngClass\"], [\"dropdownToggle\", \"\", 1, \"selected-flag\", \"dropdown-toggle\"], [1, \"iti-flag\", 3, \"ngClass\", \"tooltip\"], [\"class\", \"selected-dial-code\", 4, \"ngIf\"], [1, \"iti-arrow\"], [\"class\", \"dropdown-menu country-dropdown\", 4, \"dropdownMenu\"], [\"type\", \"tel\", \"autocomplete\", \"off\", 3, \"id\", \"ngClass\", \"ngModel\", \"disabled\", \"placeholder\", \"blur\", \"keypress\", \"ngModelChange\"], [\"focusable\", \"\"], [1, \"selected-dial-code\"], [1, \"dropdown-menu\", \"country-dropdown\"], [\"class\", \"search-container\", 4, \"ngIf\"], [1, \"country-list\"], [\"countryList\", \"\"], [\"class\", \"country\", 3, \"id\", \"click\", 4, \"ngFor\", \"ngForOf\"], [\"class\", \"divider\", 4, \"ngIf\"], [1, \"search-container\"], [\"id\", \"country-search-box\", \"autofocus\", \"\", 3, \"ngModel\", \"placeholder\", \"ngModelChange\", \"keyup\", \"click\"], [1, \"country\", 3, \"id\", \"click\"], [1, \"flag-box\"], [1, \"iti-flag\", 3, \"ngClass\"], [1, \"country-name\"], [1, \"dial-code\"], [1, \"divider\"]],\n    template: function NgxIntlTelInputComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2);\n        ɵngcc0.ɵɵelement(3, \"div\", 3);\n        ɵngcc0.ɵɵtemplate(4, NgxIntlTelInputComponent_div_4_Template, 2, 1, \"div\", 4);\n        ɵngcc0.ɵɵelement(5, \"div\", 5);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtemplate(6, NgxIntlTelInputComponent_div_6_Template, 7, 4, \"div\", 6);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(7, \"input\", 7, 8);\n        ɵngcc0.ɵɵlistener(\"blur\", function NgxIntlTelInputComponent_Template_input_blur_7_listener() {\n          return ctx.onTouched();\n        })(\"keypress\", function NgxIntlTelInputComponent_Template_input_keypress_7_listener($event) {\n          return ctx.onInputKeyPress($event);\n        })(\"ngModelChange\", function NgxIntlTelInputComponent_Template_input_ngModelChange_7_listener($event) {\n          return ctx.phoneNumber = $event;\n        })(\"ngModelChange\", function NgxIntlTelInputComponent_Template_input_ngModelChange_7_listener() {\n          return ctx.onPhoneNumberChange();\n        });\n        ɵngcc0.ɵɵelementEnd()();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngClass\", ctx.separateDialCodeClass);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngClass\", ɵngcc0.ɵɵpureFunction1(12, _c1, ctx.disabled));\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"ngClass\", ctx.selectedCountry == null ? null : ctx.selectedCountry.flagClass)(\"tooltip\", ctx.selectedCountry ? ctx.selectedCountry[ctx.tooltipField] : \"\");\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.separateDialCode);\n        ɵngcc0.ɵɵadvance(3);\n        ɵngcc0.ɵɵproperty(\"id\", ctx.id)(\"ngClass\", ctx.cssClass)(\"ngModel\", ctx.phoneNumber)(\"disabled\", ctx.disabled)(\"placeholder\", ctx.separateDialCodePlaceHolder((ctx.selectedCountry == null ? null : ctx.selectedCountry.placeHolder) || \"\"));\n        ɵngcc0.ɵɵattribute(\"maxLength\", ctx.maxLength)(\"validation\", ctx.phoneValidation);\n      }\n    },\n    directives: [ɵngcc1.NgClass, ɵngcc2.BsDropdownDirective, ɵngcc2.BsDropdownToggleDirective, ɵngcc3.TooltipDirective, ɵngcc1.NgIf, ɵngcc2.BsDropdownMenuDirective, ɵngcc4.DefaultValueAccessor, ɵngcc4.NgControlStatus, ɵngcc4.NgModel, ɵngcc1.NgForOf],\n    styles: [\"li.country[_ngcontent-%COMP%]:hover{background-color:rgba(0,0,0,.05)}.selected-flag.dropdown-toggle[_ngcontent-%COMP%]:after{content:none}.flag-container.disabled[_ngcontent-%COMP%]{cursor:default!important}.intl-tel-input.allow-dropdown[_ngcontent-%COMP%]   .flag-container.disabled[_ngcontent-%COMP%]:hover   .selected-flag[_ngcontent-%COMP%]{background:0 0}.country-dropdown[_ngcontent-%COMP%]{border:1px solid #ccc;width:-webkit-fit-content;width:-moz-fit-content;width:fit-content;padding:1px;border-collapse:collapse}.search-container[_ngcontent-%COMP%]{position:relative}.search-container[_ngcontent-%COMP%]   input[_ngcontent-%COMP%]{width:100%;border:none;border-bottom:1px solid #ccc;padding-left:10px}.search-icon[_ngcontent-%COMP%]{position:absolute;z-index:2;width:25px;margin:1px 10px}.country-list[_ngcontent-%COMP%]{position:relative;border:none}.intl-tel-input[_ngcontent-%COMP%]   input#country-search-box[_ngcontent-%COMP%]{padding-left:6px}.intl-tel-input.separate-dial-code[_ngcontent-%COMP%]   .selected-flag[_ngcontent-%COMP%], .intl-tel-input.separate-dial-code.allow-dropdown.iti-sdc-2[_ngcontent-%COMP%]   .selected-flag[_ngcontent-%COMP%], .intl-tel-input.separate-dial-code.allow-dropdown.iti-sdc-3[_ngcontent-%COMP%]   .selected-flag[_ngcontent-%COMP%], .intl-tel-input.separate-dial-code.allow-dropdown.iti-sdc-4[_ngcontent-%COMP%]   .selected-flag[_ngcontent-%COMP%]{width:93px}.intl-tel-input.separate-dial-code[_ngcontent-%COMP%]   input[_ngcontent-%COMP%], .intl-tel-input.separate-dial-code.allow-dropdown.iti-sdc-2[_ngcontent-%COMP%]   input[_ngcontent-%COMP%], .intl-tel-input.separate-dial-code.allow-dropdown.iti-sdc-3[_ngcontent-%COMP%]   input[_ngcontent-%COMP%], .intl-tel-input.separate-dial-code.allow-dropdown.iti-sdc-4[_ngcontent-%COMP%]   input[_ngcontent-%COMP%]{padding-left:98px}\"]\n  });\n  /** @nocollapse */\n\n  return NgxIntlTelInputComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nlet NgxIntlTelInputModule = /*#__PURE__*/(() => {\n  class NgxIntlTelInputModule {\n    /**\n     * @return {?}\n     */\n    static forRoot() {\n      return {\n        ngModule: NgxIntlTelInputModule,\n        providers: [NgxIntlTelInputService]\n      };\n    }\n\n  }\n\n  NgxIntlTelInputModule.ɵfac = function NgxIntlTelInputModule_Factory(t) {\n    return new (t || NgxIntlTelInputModule)();\n  };\n\n  NgxIntlTelInputModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: NgxIntlTelInputModule\n  });\n  NgxIntlTelInputModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[CommonModule, FormsModule, ReactiveFormsModule, BsDropdownModule.forRoot(), TooltipModule.forRoot()]]\n  });\n  return NgxIntlTelInputModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgxIntlTelInputModule, {\n    declarations: function () {\n      return [NgxIntlTelInputComponent];\n    },\n    imports: function () {\n      return [CommonModule, FormsModule, ReactiveFormsModule, ɵngcc2.BsDropdownModule, ɵngcc3.TooltipModule];\n    },\n    exports: function () {\n      return [NgxIntlTelInputComponent];\n    }\n  });\n})();\n\nexport { CountryISO, NgxIntlTelInputComponent, NgxIntlTelInputModule, NgxIntlTelInputService, SearchCountryField, TooltipLabel, CountryCode as ɵa, phoneNumberValidator as ɵb }; //# sourceMappingURL=ngx-intl-tel-input.js.map","map":null,"metadata":{},"sourceType":"module"}